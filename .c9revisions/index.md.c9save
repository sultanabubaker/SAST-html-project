{"ts":1344992045170,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<link href=\"markdown.css\" rel=\"stylesheet\"></link>\n# HTML5 Canvas Code Examples\n\n## Hello Canvas\n[run](canvas/helloCanvas.html)\n<iframe width=\"100\" height=\"100\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/helloCanvas.html\"></iframe>\n\nDrawing a blue rectangle. This example demonstrates:\n\n * Getting the canvas 2D context\n * Setting the fill style\n * filling a rectangle\n * using the Canvas pixel coordinate space\n\n## Smiley Face\n[run](canvas/smileyFace.html)\n<iframe width=\"150\" height=\"150\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\"\n        src=\"canvas/smileyFace.html\"></iframe>\n\nDrawing a smiley face. This example demonstrates:\n\n * The concept of paths\n * Drawing circles and arcs using the Canvas functions `beginPath`, `arc`, `fill`, and `stroke`\n * Fill style vs. stroke style\n\n## Hello Text!\n[run](canvas/helloText.html)\n<iframe width=\"400\" height=\"70\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/helloText.html\"></iframe>\n\nDrawing the text \"Hello Text!\" in gray with a black stroke. This example demonstrates:\n\n * Using the Canvas text API\n * Setting the font\n * Setting the stroke style\n * Filling and stroking text\n\n## The Sierpinski Triangle\n[run](canvas/sierpinskiTriangle/index.html)\n<iframe width=\"400\" height=\"300\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/sierpinskiTriangle/index.html\"></iframe>\n\nDrawing the Sierpinski Triangle. This example demonstrates:\n\n * Drawing polygons\n * Recursive geometric structures\n\nSee also the [Sierpinski Carpet](canvas/sierpinskiCarpet/index.html)\n\n## Digital Clock\n[run](canvas/digitalClock/index.html)\n<iframe width=\"400\" height=\"70\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/digitalClock/index.html\"></iframe>\n\nDrawing the text representing the time of day. This example demonstrates:\n\n * Periodically clearing and redrawing the canvas using `setInterval`\n * Drawing a background color instead of clearing the canvas to white\n * Using colors picked by hand with [JSColor](http://jscolor.com/)\n * Using the JavaScript Date API\n * Eliminating the margin around the canvas using inline CSS on the `body` tag\n\n## Mouse Follower\n[run](canvas/mouseFollower/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/mouseFollower/index.html\"></iframe>\n\nDrawing a circle that follows the mouse. This example demonstrates:\n\n * Responding to mouse events `mousemove` and `mouseout`\n\n## Bouncing Ball\n[run](canvas/bouncingBall/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/bouncingBall/index.html\"></iframe>\n\nA bouncing ball that can be swung around with the mouse. This example demonstrates:\n\n * Listening for mouse events `mousedown`, `mouseup`, and `mouseenter`\n * Animation using `requestAnimationFrame` (through a [cross-browser shim](http://paulirish.com/2011/requestanimationframe-for-smart-animating/))\n * Bouncing physics\n * Velocity vectors\n * Simulation\n * Drawing lines\n * Animating only when the mouse is over the Canvas\n\n## Wave Simulation\n[run](canvas/waveSimulation1D/index.html)\n<iframe width=\"520\" height=\"80\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/waveSimulation1D/index.html\"></iframe>\n\nA 1-dimensional numeric simulation of [the Wave equation](http://en.wikipedia.org/wiki/Wave_equation#Investigation_by_numerical_methods). This example demonstrates:\n\n * Resizing the canvas to the window (or containing iFrame)\n * Visualizing and interacting with a dynamic simulation\n * Transforming (x,y) coordinates between a model space and the display space\n * Using multiple `script` tags\n\n## 2D Wave Simulation\n[run](canvas/waveSimulation2D/index.html)\n<iframe width=\"300\" height=\"300\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/waveSimulation2D/index.html\"></iframe>\n\nA 2-dimensional numeric simulation of [the Wave equation](http://en.wikipedia.org/wiki/Wave_equation#Investigation_by_numerical_methods). This example demonstrates:\n\n * An interactive grid\n * Using luminance to visualize values\n * Color object re-use optimization\n\n## Multi-touch Fingerpainting\n[run](mobile/multiTouchFingerpainting/index.html) (supports multi-touch in iOS devices)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"mobile/multiTouchFingerpainting/index.html\"></iframe>\n\nMulti-touch fingerpainting, where each touch gets its own random color. This example demonstrates:\n\n * Responding to touch events in iOS devices\n * Tracking stateful objects based on touches\n * Generating random colors\n\n<div id=\"disqus_thread\"></div>\n<script src=\"disqus.js\"></script>\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4894}]],"length":4894}
{"contributors":[],"silentsave":false,"ts":1345644587379,"patch":[[{"diffs":[[0,"cript>\n\n"],[1,"## Starfield\n[run](canvas/starfield/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/starfield/index.html\"></iframe>\n\nA starfield with stars moving toward you. The mouse controls the focal length. This example demonstrates:\n\n * Perspective projection\n\n<div id=\"disqus_thread\"></div>\n<script src=\"disqus.js\"></script>\n\n"]],"start1":4886,"start2":4886,"length1":8,"length2":407}]],"length":5293,"saved":false}
{"contributors":[],"silentsave":false,"ts":1345645084114,"patch":[[{"diffs":[[0,"Canvas\n\n"],[1,"## Bouncing Balls\n[run](canvas/bouncingBall/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/bouncingBall/index.html\"></iframe>\n\nA bouncing ball that can be swung around with the mouse. This example demonstrates:\n\n * Listening for mouse events `mousedown`, `mouseup`, and `mouseenter`\n * Animation using `requestAnimationFrame` (through a [cross-browser shim](http://paulirish.com/2011/requestanimationframe-for-smart-animating/))\n * Bouncing physics\n * Velocity vectors\n * Simulation\n * Drawing lines\n * Animating only when the mouse is over the Canvas\n\n## Starfield\n[run](canvas/starfield/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/starfield/index.html\"></iframe>\n\nA starfield with stars moving toward you. The mouse controls the focal length. This example demonstrates:\n\n * Perspective projection\n * The concept of focal length\n\n"],[0,"## Wave "]],"start1":3217,"start2":3217,"length1":16,"length2":1016},{"diffs":[[0,"t>\n\n"],[-1,"## Starfield\n[run](canvas/starfield/index.html)\n<iframe width=\"520\" height=\"200\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" \n        src=\"canvas/starfield/index.html\"></iframe>\n\nA starfield with stars moving toward you. The mouse controls the focal length. This example demonstrates:\n\n * Perspective projection\n\n<div id=\"disqus_thread\"></div>\n<script src=\"disqus.js\"></script>\n\n"]],"start1":5890,"start2":5890,"length1":403,"length2":4}]],"length":5894,"saved":false}
{"ts":1345645222570,"patch":[[{"diffs":[[0,"\n## "],[-1,"Bouncing Balls"],[1,"Tree Fractal"],[0,"\n[ru"]],"start1":3224,"start2":3224,"length1":22,"length2":20},{"diffs":[[0,"run](canvas/"],[-1,"bouncingBal"],[1,"treeFracta"],[0,"l/index.html"]],"start1":3242,"start2":3242,"length1":35,"length2":34},{"diffs":[[0,"src=\"canvas/"],[-1,"bouncingBal"],[1,"treeFracta"],[0,"l/index.html"]],"start1":3384,"start2":3384,"length1":35,"length2":34},{"diffs":[[0,">\n\nA"],[-1," bouncing ball that can be swung around with the mouse. This example demonstrates:\n\n * Listening for mouse events `mousedown`, `mouseup`, and `mouseenter`\n * Animation using `requestAnimationFrame` (through a [cross-browser shim](http://paulirish.com/2011/requestanimationframe-for-smart-animating/))\n * Bouncing physics\n * Velocity vectors\n * Simulation\n * Drawing lines\n * Animating only when the mouse is over the Canvas"],[1,"n interactive tree fractal. This example demonstrates:\n\n * Changing parameters based on the mouse location"],[0,"\n\n##"]],"start1":3428,"start2":3428,"length1":431,"length2":114}]],"length":5573,"saved":false}
